CREATE TABLE SEATS (
    seat_id INT PRIMARY KEY,
    hall_id INT NOT NULL,
    row_number int NOT NULL,
    seat_number int NOT NULL,
    CONSTRAINT FK_SEATS_HALLS FOREIGN KEY (hall_id) REFERENCES HALLS(hall_id)
);

DELETE FROM SEATS;

DROP TABLE SEATS;

INSERT INTO SEATS
VALUES (1, 6, 1, 1);

INSERT INTO SEATS
VALUES (2, 6, 1, 2);

INSERT INTO SEATS
VALUES (3, 6, 1, 3);

INSERT INTO SEATS
VALUES (4, 6, 1, 4);

INSERT INTO SEATS
VALUES (5, 6, 1, 5);

INSERT INTO SEATS
VALUES (6, 1, 10, 5);

INSERT INTO SEATS
VALUES (7, 2, 10, 6);

INSERT INTO SEATS
VALUES (8, 2, 2, 1);

INSERT INTO SEATS
VALUES (9, 3, 3, 3);

INSERT INTO SEATS
VALUES (10, 4, 4, 10);

INSERT INTO SEATS
VALUES (11, 5, 7, 3);

INSERT INTO SEATS
VALUES (12, 5, 4, 2);

select * from seats;


CREATE TABLE TICKETS (
    ticket_id INT PRIMARY KEY,
    screening_id INT NOT NULL,
    client_id INT NOT NULL,
    type_id INT NOT NULL,
    --seat_id INT NOT NULL,
    --price INT NOT NULL,
    CONSTRAINT FK_TICKETS_SCREENINGS FOREIGN KEY (screening_id) REFERENCES SCREENINGS(screening_id),
    CONSTRAINT FK_TICKETS_CLIENTS FOREIGN KEY (client_id) REFERENCES CLIENTS(client_id),
    CONSTRAINT FK_TICKETS_TYPES FOREIGN KEY (type_id) REFERENCES TICKET_TYPES(type_id)
    --CONSTRAINT FK_TICKETS_SEATS FOREIGN KEY (seat_id) REFERENCES SEATS(seat_id)
);

drop table tickets;

ALTER TABLE TICKETS
DROP CONSTRAINT FK_TICKETS_SEATS;

ALTER TABLE TICKETS
DROP CONSTRAINT FK_TICKETS_CLIENTS;

ALTER TABLE TICKETS
DROP CONSTRAINT FK_TICKETS_SCREENING;

ALTER TABLE TICKETS
DROP COLUMN SEAT_ID;

ALTER TABLE TICKETS
DROP COLUMN PRICE;

ALTER TABLE TICKETS
ADD COLUMN PRICE;



alter table plays_in add constraint FK_PLAYS_IN_MOVIES FOREIGN KEY (movie_id) REFERENCES MOVIES(movie_id);

alter table screenings add constraint FK_SCREENINGS_MOVIES FOREIGN KEY (movie_id) REFERENCES MOVIES(movie_id);


SELECT movie_name
FROM movies
WHERE genre = 'Drama' and movie_id in
                   (SELECT s.movie_id
                    FROM screenings s join halls h on (h.hall_id = s.hall_id)
                                     join tickets t on (t.screening_id = s.screening_id)
                    GROUP BY s.movie_id, h.capacity
                    HAVING COUNT(t.ticket_id) >= h.capacity * (9/10)
                    );

SELECT s.screening_id, m.movie_name, s.showtime
FROM screenings s join halls h on (h.hall_id = s.hall_id)
                  join tickets t on (t.screening_id = s.screening_id)
                  join movies m on (m.movie_id = s.movie_id)
WHERE genre = 'Drama'
GROUP BY s.screening_id, m.movie_name, s.showtime ,h.capacity
HAVING COUNT(t.ticket_id) = h.capacity;



SELECT m.movie_name, (a.last_name || ' ' || a.first_name) nume
FROM screenings s join movies m on (m.movie_id = s.movie_id)
                  join plays_in pi on (pi.movie_id = m.movie_id)
                  join actors a on (a.actor_id = pi.actor_id)
WHERE hall_id = (SELECT hall_id
                 FROM halls
                 WHERE capacity = 150)
ORDER BY m.movie_name;



SELECT c.client_id, TRUNC(MONTHS_BETWEEN(sysdate, birth_date) / 12), m.age_restriction, s.screening_id
FROM clients c join tickets t on (t.client_id = c.client_id)
               join screenings s on (s.screening_id = t.screening_id)
               join movies m on (m.movie_id = s.movie_id);



BEGIN
    IF (are_voie_ex11(2, 4) = TRUE) THEN --client cu varsta 12 vrea sa mearga la film cu restrictie de 15
        DBMS_OUTPUT.PUT_LINE('Allowed');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Not allowed');
    END IF;
    IF (are_voie_ex11(2, 1) = TRUE) THEN --client cu varsta 20 vrea sa mearga la film cu restrictie de 15
        DBMS_OUTPUT.PUT_LINE('Allowed');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Not allowed');
    END IF;
END;
/